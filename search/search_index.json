{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"config/","title":"Config","text":""},{"location":"config/#configuration","title":"Configuration","text":"<p>the configituration file is located under <code>platform/config/config.yml</code></p>"},{"location":"config/#using-environment-variable","title":"using environment variable","text":"<p>environment variables can be used in <code>config.yml</code> file. put <code>${env_name}</code> as a placeholder</p>"},{"location":"config/#example","title":"Example","text":"<p>dev.env file <pre><code>CLIENT_ID=clientA\nCLIENT_SECRET=clientSecret\n</code></pre></p> <p>config.yaml file <pre><code>  clientId: ${CLIENT_ID}\n  clientSecret: ${CLIENT_SECRET}\n</code></pre> the <code>CLIENT_ID</code> and <code>CLIENT_SECRET</code> value will be replaced by environment variable</p>"},{"location":"config/#configure-server-host-and-portnumber","title":"configure server host and portnumber","text":"<pre><code>server:\n  host: 0.0.0.0   # The host should be \"0.0.0.0 in Docker Container\n#  host: localhost   # The host should be \"0.0.0.0 in Docker Container\n  portNumber: 8080\n  logLevel: info\n</code></pre>"},{"location":"config/#oauth2","title":"oauth2","text":"<p>configuration example <pre><code>oauth2:\n  redirectUrl:  \"http://localhost:8080/login/oauth2/code/dbwebsso\"\n  clientId: ${CLIENT_ID}\n  clientSecret: ${CLIENT_SECRET}\n  scopes:\n    - \"54f98af6-5da1-4d54-8610-8fad122aa628/.default\"\n    - \"openid\"\n    - \"profile\"\n    - \"email\"\n  tenant: \"a1a72d9c-49e6-4f6d-9af6-5aafa1183bfd\"\n</code></pre></p>"},{"location":"config/#oidc","title":"oidc","text":"<p>configuration example <pre><code>oidc:\nredirectUrl:  \"http://localhost:8080/login/oauth2/code/dbwebsso\"\nclientId: ${CLIENT_ID}\nclientSecret: ${CLIENT_SECRET}\nscopes:\n- \"54f98af6-5da1-4d54-8610-8fad122aa628/.default\"\n- \"openid\"\n- \"profile\"\n- \"email\"\nissuer: \"https://login.microsoftonline.com/a1a72d9c-49e6-4f6d-9af6-5aafa1183bfd/v2.0\"  #/.well-known/openid-configuration\n</code></pre></p>"},{"location":"endpoint/","title":"Endpoint","text":""},{"location":"endpoint/#default-http-endpoints","title":"default http endpoints","text":"<p><code>http request GET localhost:8080/actuator/health GET localhost:8080/actuator/mem GET localhost:8080/actuator/config GET localhost:8080/graphql/ POST localhost:8080/graphql/query</code></p>"},{"location":"how-it-works/","title":"How it works","text":""},{"location":"how-it-works/#how-it-works","title":"How it works","text":""},{"location":"quick-start/","title":"Quick start","text":""},{"location":"quick-start/#build","title":"Build","text":"<pre><code>go build .\n</code></pre>"},{"location":"quick-start/#run","title":"Run","text":"<p>Build and run <pre><code>go run .\n</code></pre></p> <p>or just run the compiled binary <pre><code>./go-boot\n</code></pre></p>"},{"location":"quick-start/#graphql","title":"Graphql","text":"<p>Graphql Endpoint <pre><code>localhost:8080/graphql/\n</code></pre></p> <p>Example of graphql  <pre><code>mutation createTodo {\n  createTodo(input: { text: \"todo\", userId: \"1\" }) {\n    user {\n      id\n    }\n    text\n    done\n  }\n}\n</code></pre></p> <pre><code>query findTodos {\n  todos {\n    text\n    done\n    user {\n      name\n    }\n  }\n}\n</code></pre>"},{"location":"security/","title":"Security","text":""},{"location":"security/#security","title":"Security","text":"<p><code>go-boot</code> support <code>oauth2</code> and <code>oidc</code>. <code>go-boot</code> is using casbin to control the user access.  if a user doesn't own token, the http request will be rejected.</p>"},{"location":"security/#casbin-access-control-model","title":"Casbin Access Control Model","text":"<p><code>platform/config/authz_model.conf</code> file defines access control model. It uses RBAC(Role-Based Access Control)model as a default.</p>"},{"location":"security/#casbin-policy","title":"Casbin Policy","text":"<p><code>platform/config/authz_policy.csv</code> file defines casbin policy.  currently, all users can access the all the http endpoints</p>"},{"location":"blog/","title":"Blog","text":""}]}